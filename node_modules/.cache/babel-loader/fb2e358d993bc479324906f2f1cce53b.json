{"ast":null,"code":"import Web3 from 'web3';\nconst nftManagerAbi = `[\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"closeSale\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"category\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"num\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"ipfsHash\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"establish\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"purchase\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"price\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"startSale\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getInfo\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"components\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\t\t\"type\": \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\t\t\"name\": \"onSale\",\n\t\t\t\t\t\t\"type\": \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"price\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"category\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\t\t\"type\": \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\t\t\"name\": \"ipfsHash\",\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"internalType\": \"struct NftManager.Detail\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"tuple\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"category\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getNFTs\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"components\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\t\t\"type\": \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\t\t\"name\": \"onSale\",\n\t\t\t\t\t\t\"type\": \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"price\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"category\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\t\t\"type\": \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\t\t\"name\": \"ipfsHash\",\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"internalType\": \"struct NftManager.Detail[]\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"tuple[]\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"nfts\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"onSale\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"price\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"valid\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"testforWorking\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t}\n]\n`;\nconst nftManagerContractAddress = \"0xe248F26e92dbE612174aC3C5d6c3bB705Ef215bc\";\nexport async function getApproval(contractAddress, ipfsHash, public_key) {\n  const web3 = new Web3(window.ethereum);\n\n  if (typeof web3 !== 'undefined') {\n    var nftContractAbi = await fetch(\"https://ipfs.io/ipfs/QmZXbYk8QeGiT8Tzw8ESygbRVv4Xg1nynciTYzv3DJ1agD\").then(response => response.json()).then(responseJson => {\n      return responseJson.output.abi;\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n    console.log(\"nftContractAbi:\", nftContractAbi);\n    var myContract = new web3.eth.Contract(nftContractAbi, contractAddress);\n    const response = await myContract.methods.isApprovedForAll(public_key, nftManagerContractAddress).call({\n      from: window.web3.currentProvider.selectedAddress\n    });\n    console.log(\"getSpecific recieved result for getMetaData:\", response);\n    return response;\n  } else {\n    console.log(\"web3 not defined\");\n  }\n}\nexport async function getMarketNfts(category) {\n  if (!category) return [];\n  const web3 = new Web3(window.ethereum);\n\n  if (typeof web3 !== 'undefined') {\n    var abi = JSON.parse(nftManagerAbi);\n    var myContract = new web3.eth.Contract(abi, nftManagerContractAddress);\n    console.log(\"getMarketNfts called\");\n    var category_type;\n    if (category == \"land\") category_type = 0;else if (category == \"wearable\") category_type = 1;else if (category == \"decoration\") category_type = 2;else {\n      console.log(\"category \", category, \" not known!\");\n      return [];\n    }\n    const response = await myContract.methods.getNFTs(category_type).call({\n      from: window.web3.currentProvider.selectedAddress\n    });\n    const result = [];\n    console.log(\"getMarketNfts recieved result:\", response);\n\n    for (let i = 0; i < response.length; i++) {\n      if (response[i][1]) {\n        result.push({\n          price: response[i][2],\n          onSale: response[i][1],\n          owner: response[i][0].toLowerCase(),\n          contractAddress: response[i][5],\n          tokenId: response[i][4],\n          category: category\n        });\n      }\n    }\n\n    return result;\n  } else {\n    console.log(\"web3 not defined\");\n    return [];\n  }\n}\nexport async function getUserNfts(public_key, category) {\n  const web3 = new Web3(window.ethereum);\n\n  if (typeof web3 !== 'undefined') {\n    var abi = JSON.parse(nftManagerAbi);\n    var myContract = new web3.eth.Contract(abi, nftManagerContractAddress);\n    console.log(\"getUserNfts called\");\n    var category_type;\n    if (category == \"land\") category_type = 0;else if (category == \"wearable\") category_type = 1;else if (category == \"decoration\") category_type = 2;else {\n      console.log(\"category \", category, \" not known!\");\n      return;\n    }\n    const response = await myContract.methods.getNFTs(category_type).call({\n      from: window.web3.currentProvider.selectedAddress\n    });\n    console.log(\"getUserNfts recieved result:\", response);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      if (response[i][0].toLowerCase() == public_key) {\n        result.push({\n          price: response[i][2],\n          onSale: response[i][1],\n          owner: response[i][0].toLowerCase(),\n          contractAddress: response[i][5],\n          tokenId: response[i][4],\n          category: category\n        });\n      }\n    }\n\n    console.log(\"result:\", result);\n    return result;\n  } else {\n    console.log(\"web3 not defined\");\n  }\n}\nexport async function getSpecific(contractAddress, id) {\n  const web3 = new Web3(window.ethereum);\n\n  if (typeof web3 !== 'undefined') {\n    var abi = JSON.parse(nftManagerAbi);\n    var myContract2 = new web3.eth.Contract(abi, nftManagerContractAddress);\n    const response2 = await myContract2.methods.getInfo(contractAddress, id).call({\n      from: window.web3.currentProvider.selectedAddress\n    });\n    var category_type = response2[3];\n    var category;\n    if (category_type == 0) category = \"land\";else if (category_type == 1) category = \"wearable\";else if (category_type == 2) category = \"decoration\";else category = \"fuck\";\n    console.log(\"getSpecific recieved result for getNFTs:\", response2);\n    const result = {\n      // name: response[0],\n      // category: response[1],\n      // description: response[2],\n      price: response2[2],\n      onSale: response2[1],\n      owner: response2[0].toLowerCase(),\n      contractAddress: response2[5],\n      tokenId: response2[4],\n      category: category,\n      ipfsHash: response2[6]\n    };\n    console.log(\"result:\", result);\n    return result;\n    console.log(\"getSpecific | fetching abi\");\n    var nftContractAbi = await fetch(\"https://ipfs.io/ipfs/QmZXbYk8QeGiT8Tzw8ESygbRVv4Xg1nynciTYzv3DJ1agD\").then(response => response.json()).then(responseJson => {\n      return responseJson.output.abi;\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n    console.log(\"nftContractAbi:\", nftContractAbi); // var abi = JSON.parse(nftManagerAbi);\n\n    var myContract = new web3.eth.Contract(nftContractAbi, contractAddress);\n    const response = await myContract.methods.getMetaData().call({\n      from: window.web3.currentProvider.selectedAddress\n    });\n    console.log(\"getSpecific recieved result for getMetaData:\", response);\n\n    for (let i = 0; i < response2.length; i++) {\n      console.log(response2[i][5].toLowerCase(), contractAddress.toLowerCase(), response2[i][4], id);\n\n      if (response2[i][5].toLowerCase() == contractAddress.toLowerCase() && response2[i][4] == id) {\n        const result = {\n          name: response[0],\n          category: response[1],\n          description: response[2],\n          price: response2[i][2],\n          onSale: response2[i][1],\n          owner: response2[i][0].toLowerCase(),\n          contractAddress: response2[i][5],\n          tokenId: response2[i][4],\n          category: category\n        };\n        console.log(\"result:\", result);\n        return result;\n      }\n    }\n\n    console.log(\"Not Found specific!!!\");\n    return;\n  } else {\n    console.log(\"web3 not defined\");\n  }\n}\nexport async function getSpecific2(contractAddress, id) {\n  const web3 = new Web3(window.ethereum);\n\n  if (typeof web3 !== 'undefined') {\n    var abi = JSON.parse(nftManagerAbi);\n    var myContract2 = new web3.eth.Contract(abi, nftManagerContractAddress);\n    const response2 = await myContract2.methods.getInfo(contractAddress, id).call({\n      from: window.web3.currentProvider.selectedAddress\n    });\n    var category_type = response2[3];\n    var category;\n    if (category_type == 0) category = \"land\";else if (category_type == 1) category = \"wearable\";else if (category_type == 2) category = \"decoration\";else category = \"fuck\";\n    console.log(\"getSpecific recieved result for getNFTs:\", response2);\n    const result = {\n      // name: response[0],\n      // category: response[1],\n      // description: response[2],\n      price: response2[2],\n      onSale: response2[1],\n      owner: response2[0].toLowerCase(),\n      contractAddress: response2[5],\n      tokenId: response2[4],\n      category: category,\n      ipfsHash: response2[6]\n    };\n    console.log(\"result:\", result);\n    return result;\n  } else {\n    console.log(\"web3 not defined\");\n  }\n}","map":{"version":3,"sources":["C:/Users/tarus/Documents/Marketplace-ReactJS-Project/client/src/services/productData.js"],"names":["Web3","nftManagerAbi","nftManagerContractAddress","getApproval","contractAddress","ipfsHash","public_key","web3","window","ethereum","nftContractAbi","fetch","then","response","json","responseJson","output","abi","catch","error","console","log","myContract","eth","Contract","methods","isApprovedForAll","call","from","currentProvider","selectedAddress","getMarketNfts","category","JSON","parse","category_type","getNFTs","result","i","length","push","price","onSale","owner","toLowerCase","tokenId","getUserNfts","getSpecific","id","myContract2","response2","getInfo","getMetaData","name","description","getSpecific2"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst nftManagerAbi = `[\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"closeSale\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"category\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"num\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"ipfsHash\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"establish\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"purchase\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"startSale\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"constructor\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getInfo\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\t\t\"name\": \"onSale\",\r\n\t\t\t\t\t\t\"type\": \"bool\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"category\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"ipfsHash\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct NftManager.Detail\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"tuple\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"category\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getNFTs\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\t\t\"name\": \"onSale\",\r\n\t\t\t\t\t\t\"type\": \"bool\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"category\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"ipfsHash\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct NftManager.Detail[]\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"nfts\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"onSale\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"valid\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"testforWorking\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n]\r\n`;\r\nconst nftManagerContractAddress = \"0xe248F26e92dbE612174aC3C5d6c3bB705Ef215bc\";\r\n\r\nexport async function getApproval(contractAddress, ipfsHash, public_key) {\r\n    const web3 = new Web3(window.ethereum);\r\n    if (typeof web3 !== 'undefined') {\r\n        var nftContractAbi = await fetch(\"https://ipfs.io/ipfs/QmZXbYk8QeGiT8Tzw8ESygbRVv4Xg1nynciTYzv3DJ1agD\")\r\n            .then((response) => response.json())\r\n            .then((responseJson) => {\r\n                return responseJson.output.abi;\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            })\r\n        console.log(\"nftContractAbi:\", nftContractAbi);\r\n\r\n        var myContract = new web3.eth.Contract(nftContractAbi, contractAddress);\r\n        const response = await myContract.methods.isApprovedForAll(public_key, nftManagerContractAddress)\r\n            .call({\r\n                from: window.web3.currentProvider.selectedAddress,\r\n            });\r\n        console.log(\"getSpecific recieved result for getMetaData:\", response);\r\n        return response;\r\n    } else {\r\n        console.log(\"web3 not defined\");\r\n    }\r\n}\r\n\r\nexport async function getMarketNfts(category) {\r\n    if (!category) return [];\r\n    const web3 = new Web3(window.ethereum);\r\n    if (typeof web3 !== 'undefined') {\r\n        var abi = JSON.parse(nftManagerAbi);\r\n        var myContract = new web3.eth.Contract(abi, nftManagerContractAddress);\r\n        console.log(\"getMarketNfts called\");\r\n        var category_type;\r\n        if (category == \"land\") category_type = 0;\r\n        else if (category == \"wearable\") category_type = 1;\r\n        else if (category == \"decoration\") category_type = 2;\r\n        else {\r\n            console.log(\"category \", category, \" not known!\");\r\n            return [];\r\n        }\r\n        const response = await myContract.methods.getNFTs(category_type)\r\n            .call({\r\n                from: window.web3.currentProvider.selectedAddress,\r\n            });\r\n        const result = [];\r\n        console.log(\"getMarketNfts recieved result:\", response);\r\n        for (let i = 0; i < response.length; i++) {\r\n            if (response[i][1]) {\r\n                result.push({\r\n                    price: response[i][2],\r\n                    onSale: response[i][1],\r\n                    owner: response[i][0].toLowerCase(),\r\n                    contractAddress: response[i][5],\r\n                    tokenId: response[i][4],\r\n                    category: category\r\n                })\r\n            }\r\n        }\r\n        return result;\r\n    } else {\r\n        console.log(\"web3 not defined\");\r\n        return [];\r\n    }\r\n}\r\n\r\nexport async function getUserNfts(public_key, category) {\r\n    const web3 = new Web3(window.ethereum);\r\n    if (typeof web3 !== 'undefined') {\r\n        var abi = JSON.parse(nftManagerAbi);\r\n        var myContract = new web3.eth.Contract(abi, nftManagerContractAddress);\r\n        console.log(\"getUserNfts called\");\r\n        var category_type;\r\n        if (category == \"land\") category_type = 0;\r\n        else if (category == \"wearable\") category_type = 1;\r\n        else if (category == \"decoration\") category_type = 2;\r\n        else {\r\n            console.log(\"category \", category, \" not known!\");\r\n            return;\r\n        }\r\n        const response = await myContract.methods.getNFTs(category_type)\r\n            .call({\r\n                from: window.web3.currentProvider.selectedAddress,\r\n            });\r\n        console.log(\"getUserNfts recieved result:\", response);\r\n        const result = [];\r\n        for (let i = 0; i < response.length; i++) {\r\n            if (response[i][0].toLowerCase() == public_key) {\r\n                result.push({\r\n                    price: response[i][2],\r\n                    onSale: response[i][1],\r\n                    owner: response[i][0].toLowerCase(),\r\n                    contractAddress: response[i][5],\r\n                    tokenId: response[i][4],\r\n                    category: category\r\n                })\r\n            }\r\n        }\r\n        console.log(\"result:\", result);\r\n        return result;\r\n    } else {\r\n        console.log(\"web3 not defined\");\r\n    }\r\n}\r\n\r\nexport async function getSpecific(contractAddress, id) {\r\n    const web3 = new Web3(window.ethereum);\r\n    if (typeof web3 !== 'undefined') {\r\n        var abi = JSON.parse(nftManagerAbi);\r\n        var myContract2 = new web3.eth.Contract(abi, nftManagerContractAddress);\r\n        const response2 = await myContract2.methods.getInfo(contractAddress, id)\r\n            .call({\r\n                from: window.web3.currentProvider.selectedAddress,\r\n            });\r\n        var category_type = response2[3];\r\n        var category;\r\n        if (category_type == 0) category = \"land\";\r\n        else if (category_type == 1) category = \"wearable\";\r\n        else if (category_type == 2) category = \"decoration\";\r\n        else category = \"fuck\";\r\n        console.log(\"getSpecific recieved result for getNFTs:\", response2);\r\n        const result = {\r\n            // name: response[0],\r\n            // category: response[1],\r\n            // description: response[2],\r\n            price: response2[2],\r\n            onSale: response2[1],\r\n            owner: response2[0].toLowerCase(),\r\n            contractAddress: response2[5],\r\n            tokenId: response2[4],\r\n            category: category,\r\n            ipfsHash: response2[6]\r\n        }\r\n        console.log(\"result:\", result);\r\n        return result;\r\n\r\n        console.log(\"getSpecific | fetching abi\");\r\n        var nftContractAbi = await fetch(\"https://ipfs.io/ipfs/QmZXbYk8QeGiT8Tzw8ESygbRVv4Xg1nynciTYzv3DJ1agD\")\r\n            .then((response) => response.json())\r\n            .then((responseJson) => {\r\n                return responseJson.output.abi;\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            })\r\n        console.log(\"nftContractAbi:\", nftContractAbi);\r\n        // var abi = JSON.parse(nftManagerAbi);\r\n        var myContract = new web3.eth.Contract(nftContractAbi, contractAddress);\r\n        const response = await myContract.methods.getMetaData()\r\n            .call({\r\n                from: window.web3.currentProvider.selectedAddress,\r\n            });\r\n        console.log(\"getSpecific recieved result for getMetaData:\", response);\r\n\r\n        for (let i = 0; i < response2.length; i++) {\r\n            console.log(response2[i][5].toLowerCase(), contractAddress.toLowerCase(), response2[i][4], id);\r\n            if (response2[i][5].toLowerCase() == contractAddress.toLowerCase() && response2[i][4] == id) {\r\n                const result = {\r\n                    name: response[0],\r\n                    category: response[1],\r\n                    description: response[2],\r\n                    price: response2[i][2],\r\n                    onSale: response2[i][1],\r\n                    owner: response2[i][0].toLowerCase(),\r\n                    contractAddress: response2[i][5],\r\n                    tokenId: response2[i][4],\r\n                    category: category\r\n                }\r\n                console.log(\"result:\", result);\r\n                return result;\r\n            }\r\n        }\r\n        console.log(\"Not Found specific!!!\");\r\n        return;\r\n\r\n    } else {\r\n        console.log(\"web3 not defined\");\r\n    }\r\n}\r\n\r\nexport async function getSpecific2(contractAddress, id) {\r\n    const web3 = new Web3(window.ethereum);\r\n    if (typeof web3 !== 'undefined') {\r\n        var abi = JSON.parse(nftManagerAbi);\r\n        var myContract2 = new web3.eth.Contract(abi, nftManagerContractAddress);\r\n        const response2 = await myContract2.methods.getInfo(contractAddress, id)\r\n            .call({\r\n                from: window.web3.currentProvider.selectedAddress,\r\n            });\r\n        var category_type = response2[3];\r\n        var category;\r\n        if (category_type == 0) category = \"land\";\r\n        else if (category_type == 1) category = \"wearable\";\r\n        else if (category_type == 2) category = \"decoration\";\r\n        else category = \"fuck\";\r\n        console.log(\"getSpecific recieved result for getNFTs:\", response2);\r\n        const result = {\r\n            // name: response[0],\r\n            // category: response[1],\r\n            // description: response[2],\r\n            price: response2[2],\r\n            onSale: response2[1],\r\n            owner: response2[0].toLowerCase(),\r\n            contractAddress: response2[5],\r\n            tokenId: response2[4],\r\n            category: category,\r\n            ipfsHash: response2[6]\r\n        }\r\n        console.log(\"result:\", result);\r\n        return result;\r\n    } else {\r\n        console.log(\"web3 not defined\");\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}