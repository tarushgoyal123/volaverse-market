{"ast":null,"code":"import Web3 from 'web3';\nconst baseUrl = 'http://localhost:5000';\nconst nftTraderAbi = `[\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"closeSale\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"category\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"num\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\"name\": \"ipfsHash\",\n\t\t\t\t\"type\": \"string\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"establish\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"purchase\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"payable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"price\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"startSale\",\n\t\t\"outputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"type\": \"constructor\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getInfo\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"components\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\t\t\"type\": \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\t\t\"name\": \"onSale\",\n\t\t\t\t\t\t\"type\": \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"price\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"category\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\t\t\"type\": \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\t\t\"name\": \"ipfsHash\",\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"internalType\": \"struct NftManager.Detail\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"tuple\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"category\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"getNFTs\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"components\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\t\t\"type\": \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\t\t\"name\": \"onSale\",\n\t\t\t\t\t\t\"type\": \"bool\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"price\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"category\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\t\t\"name\": \"tokenId\",\n\t\t\t\t\t\t\"type\": \"uint256\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\t\t\"name\": \"contractAddress\",\n\t\t\t\t\t\t\"type\": \"address\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"internalType\": \"string\",\n\t\t\t\t\t\t\"name\": \"ipfsHash\",\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"internalType\": \"struct NftManager.Detail[]\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"tuple[]\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"name\": \"nfts\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"address\",\n\t\t\t\t\"name\": \"owner\",\n\t\t\t\t\"type\": \"address\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"onSale\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"price\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"internalType\": \"bool\",\n\t\t\t\t\"name\": \"valid\",\n\t\t\t\t\"type\": \"bool\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t},\n\t{\n\t\t\"inputs\": [],\n\t\t\"name\": \"testforWorking\",\n\t\t\"outputs\": [\n\t\t\t{\n\t\t\t\t\"internalType\": \"uint256\",\n\t\t\t\t\"name\": \"\",\n\t\t\t\t\"type\": \"uint256\"\n\t\t\t}\n\t\t],\n\t\t\"stateMutability\": \"view\",\n\t\t\"type\": \"function\"\n\t}\n]\n`;\nconst nftTraderContractAddress = \"0x1ffC81B9d712c8f764547132E6dF56BFF02cEBd8\"; // export async function getAll(page, category, query) {\n//     if (query !== \"\" && query !== undefined) {\n//         return (await fetch(`${baseUrl}/products?page=${page}&search=${query}`, { credentials: 'include' })).json();\n//     } else if (category && category !== 'all') {\n//         return (await fetch(`${baseUrl}/products/${category}?page=${page}`, { credentials: 'include' })).json();\n//     } else {\n//         return (await fetch(`${baseUrl}/products?page=${page}`, { credentials: 'include' })).json();\n//     }\n// }\n\nexport async function getMarketNfts(category) {\n  if (!category) return [];\n  const web3 = new Web3(window.ethereum);\n\n  if (typeof web3 !== 'undefined') {\n    var abi = JSON.parse(nftTraderAbi);\n    var myContract = new web3.eth.Contract(abi, nftTraderContractAddress);\n    console.log(\"getMarketNfts called\");\n    var category_type;\n    if (category == \"land\") category_type = 0;else if (category == \"wearable\") category_type = 1;else if (category == \"decoration\") category_type = 2;else {\n      console.log(\"category \", category, \" not known!\");\n      return [];\n    }\n    const response = await myContract.methods.getNFTs(category_type).call({\n      from: window.web3.currentProvider.selectedAddress\n    });\n    const result = [];\n    console.log(\"getMarketNfts recieved result:\", response);\n\n    for (let i = 0; i < response.length; i++) {\n      if (response[i][1]) {\n        result.push({\n          price: response[i][2],\n          onSale: response[i][1],\n          owner: response[i][0].toLowerCase(),\n          contractAddress: response[i][5],\n          tokenId: response[i][4],\n          category: category\n        });\n      }\n    }\n\n    return result;\n  } else {\n    console.log(\"web3 not defined\");\n    return [];\n  }\n}\nexport async function getUserNfts(public_key, category) {\n  const web3 = new Web3(window.ethereum);\n\n  if (typeof web3 !== 'undefined') {\n    var abi = JSON.parse(nftTraderAbi);\n    var myContract = new web3.eth.Contract(abi, nftTraderContractAddress);\n    console.log(\"getUserNfts called\");\n    var category_type;\n    if (category == \"land\") category_type = 0;else if (category == \"wearable\") category_type = 1;else if (category == \"decoration\") category_type = 2;else {\n      console.log(\"category \", category, \" not known!\");\n      return;\n    }\n    const response = await myContract.methods.getNFTs(category_type).call({\n      from: window.web3.currentProvider.selectedAddress\n    });\n    console.log(\"getUserNfts recieved result:\", response);\n    const result = [];\n\n    for (let i = 0; i < response.length; i++) {\n      if (response[i][0].toLowerCase() == public_key) {\n        result.push({\n          price: response[i][2],\n          onSale: response[i][1],\n          owner: response[i][0].toLowerCase(),\n          contractAddress: response[i][5],\n          tokenId: response[i][4],\n          category: category\n        });\n      }\n    }\n\n    console.log(\"result:\", result);\n    return result;\n  } else {\n    console.log(\"web3 not defined\");\n  }\n}\nexport async function getSpecific(contractAddress, id) {\n  const web3 = new Web3(window.ethereum);\n\n  if (typeof web3 !== 'undefined') {\n    var abi = JSON.parse(nftTraderAbi);\n    var myContract2 = new web3.eth.Contract(abi, nftTraderContractAddress);\n    const response2 = await myContract2.methods.getInfo(contractAddress, id).call({\n      from: window.web3.currentProvider.selectedAddress\n    });\n    var category_type = response2[3];\n    var category;\n    if (category_type == 0) category = \"land\";\n    if (category_type == 1) category = \"wearable\";\n    if (category_type == 2) category = \"decoration\";\n    console.log(\"getSpecific recieved result for getNFTs:\", response2);\n    const result = {\n      // name: response[0],\n      // category: response[1],\n      // description: response[2],\n      price: response2[2],\n      onSale: response2[1],\n      owner: response2[0].toLowerCase(),\n      contractAddress: response2[5],\n      tokenId: response2[4],\n      category: category,\n      ipfsHash: response2[6]\n    };\n    console.log(\"result:\", result);\n    return result;\n    console.log(\"getSpecific | fetching abi\");\n    var nftContractAbi = await fetch(\"https://ipfs.io/ipfs/QmZXbYk8QeGiT8Tzw8ESygbRVv4Xg1nynciTYzv3DJ1agD\").then(response => response.json()).then(responseJson => {\n      return responseJson.output.abi;\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n    console.log(\"nftContractAbi:\", nftContractAbi); // var abi = JSON.parse(nftTraderAbi);\n\n    var myContract = new web3.eth.Contract(nftContractAbi, contractAddress);\n    const response = await myContract.methods.getMetaData().call({\n      from: window.web3.currentProvider.selectedAddress\n    });\n    console.log(\"getSpecific recieved result for getMetaData:\", response);\n\n    for (let i = 0; i < response2.length; i++) {\n      console.log(response2[i][5].toLowerCase(), contractAddress.toLowerCase(), response2[i][4], id);\n\n      if (response2[i][5].toLowerCase() == contractAddress.toLowerCase() && response2[i][4] == id) {\n        const result = {\n          name: response[0],\n          category: response[1],\n          description: response[2],\n          price: response2[i][2],\n          onSale: response2[i][1],\n          owner: response2[i][0].toLowerCase(),\n          contractAddress: response2[i][5],\n          tokenId: response2[i][4],\n          category: category\n        };\n        console.log(\"result:\", result);\n        return result;\n      }\n    }\n\n    console.log(\"Not Found specific!!!\");\n    return;\n  } else {\n    console.log(\"web3 not defined\");\n  }\n}\nexport async function createProduct(product) {\n  return (await fetch(`${baseUrl}/products/create`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify(product)\n  })).json();\n}\nexport async function editProduct(id, product) {\n  return (await fetch(`${baseUrl}/products/edit/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify(product)\n  })).json();\n}\nexport async function activateSell(id) {\n  return (await fetch(`/products/enable/${id}`)).json();\n}\nexport async function archiveSell(id) {\n  return (await fetch(`/products/archive/${id}`)).json();\n}\nexport async function wishProduct(id) {\n  return (await fetch(`${baseUrl}/products/wish/${id}`, {\n    credentials: 'include'\n  })).json();\n}","map":{"version":3,"sources":["C:/Users/tarus/Documents/Marketplace-ReactJS-Project/client/src/services/productData.js"],"names":["Web3","baseUrl","nftTraderAbi","nftTraderContractAddress","getMarketNfts","category","web3","window","ethereum","abi","JSON","parse","myContract","eth","Contract","console","log","category_type","response","methods","getNFTs","call","from","currentProvider","selectedAddress","result","i","length","push","price","onSale","owner","toLowerCase","contractAddress","tokenId","getUserNfts","public_key","getSpecific","id","myContract2","response2","getInfo","ipfsHash","nftContractAbi","fetch","then","json","responseJson","output","catch","error","getMetaData","name","description","createProduct","product","method","headers","credentials","body","stringify","editProduct","activateSell","archiveSell","wishProduct"],"mappings":"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","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst baseUrl = 'http://localhost:5000';\r\nconst nftTraderAbi = `[\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"closeSale\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"category\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"num\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\"name\": \"ipfsHash\",\r\n\t\t\t\t\"type\": \"string\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"establish\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"purchase\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"payable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"startSale\",\r\n\t\t\"outputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"stateMutability\": \"nonpayable\",\r\n\t\t\"type\": \"constructor\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getInfo\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\t\t\"name\": \"onSale\",\r\n\t\t\t\t\t\t\"type\": \"bool\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"category\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"ipfsHash\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct NftManager.Detail\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"tuple\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"category\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"getNFTs\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"components\": [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\t\t\"name\": \"onSale\",\r\n\t\t\t\t\t\t\"type\": \"bool\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"category\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\t\t\"name\": \"tokenId\",\r\n\t\t\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\t\t\"name\": \"contractAddress\",\r\n\t\t\t\t\t\t\"type\": \"address\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t\"internalType\": \"string\",\r\n\t\t\t\t\t\t\"name\": \"ipfsHash\",\r\n\t\t\t\t\t\t\"type\": \"string\"\r\n\t\t\t\t\t}\r\n\t\t\t\t],\r\n\t\t\t\t\"internalType\": \"struct NftManager.Detail[]\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"tuple[]\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"name\": \"nfts\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"address\",\r\n\t\t\t\t\"name\": \"owner\",\r\n\t\t\t\t\"type\": \"address\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"onSale\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"price\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"bool\",\r\n\t\t\t\t\"name\": \"valid\",\r\n\t\t\t\t\"type\": \"bool\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t},\r\n\t{\r\n\t\t\"inputs\": [],\r\n\t\t\"name\": \"testforWorking\",\r\n\t\t\"outputs\": [\r\n\t\t\t{\r\n\t\t\t\t\"internalType\": \"uint256\",\r\n\t\t\t\t\"name\": \"\",\r\n\t\t\t\t\"type\": \"uint256\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"stateMutability\": \"view\",\r\n\t\t\"type\": \"function\"\r\n\t}\r\n]\r\n`;\r\nconst nftTraderContractAddress = \"0x1ffC81B9d712c8f764547132E6dF56BFF02cEBd8\";\r\n\r\n// export async function getAll(page, category, query) {\r\n//     if (query !== \"\" && query !== undefined) {\r\n//         return (await fetch(`${baseUrl}/products?page=${page}&search=${query}`, { credentials: 'include' })).json();\r\n//     } else if (category && category !== 'all') {\r\n//         return (await fetch(`${baseUrl}/products/${category}?page=${page}`, { credentials: 'include' })).json();\r\n//     } else {\r\n//         return (await fetch(`${baseUrl}/products?page=${page}`, { credentials: 'include' })).json();\r\n//     }\r\n// }\r\n\r\nexport async function getMarketNfts(category) {\r\n    if (!category) return [];\r\n    const web3 = new Web3(window.ethereum);\r\n    if (typeof web3 !== 'undefined') {\r\n        var abi = JSON.parse(nftTraderAbi);\r\n        var myContract = new web3.eth.Contract(abi, nftTraderContractAddress);\r\n        console.log(\"getMarketNfts called\");\r\n        var category_type;\r\n        if (category == \"land\") category_type = 0;\r\n        else if (category == \"wearable\") category_type = 1;\r\n        else if (category == \"decoration\") category_type = 2;\r\n        else {\r\n            console.log(\"category \", category, \" not known!\");\r\n            return [];\r\n        }\r\n        const response = await myContract.methods.getNFTs(category_type)\r\n            .call({\r\n                from: window.web3.currentProvider.selectedAddress,\r\n            });\r\n        const result = [];\r\n        console.log(\"getMarketNfts recieved result:\", response);\r\n        for (let i = 0; i < response.length; i++) {\r\n            if (response[i][1]) {\r\n                result.push({\r\n                    price: response[i][2],\r\n                    onSale: response[i][1],\r\n                    owner: response[i][0].toLowerCase(),\r\n                    contractAddress: response[i][5],\r\n                    tokenId: response[i][4],\r\n                    category: category\r\n                })\r\n            }\r\n        }\r\n        return result;\r\n    } else {\r\n        console.log(\"web3 not defined\");\r\n        return [];\r\n    }\r\n}\r\n\r\nexport async function getUserNfts(public_key, category) {\r\n    const web3 = new Web3(window.ethereum);\r\n    if (typeof web3 !== 'undefined') {\r\n        var abi = JSON.parse(nftTraderAbi);\r\n        var myContract = new web3.eth.Contract(abi, nftTraderContractAddress);\r\n        console.log(\"getUserNfts called\");\r\n        var category_type;\r\n        if (category == \"land\") category_type = 0;\r\n        else if (category == \"wearable\") category_type = 1;\r\n        else if (category == \"decoration\") category_type = 2;\r\n        else {\r\n            console.log(\"category \", category, \" not known!\");\r\n            return;\r\n        }\r\n        const response = await myContract.methods.getNFTs(category_type)\r\n            .call({\r\n                from: window.web3.currentProvider.selectedAddress,\r\n            });\r\n        console.log(\"getUserNfts recieved result:\", response);\r\n        const result = [];\r\n        for (let i = 0; i < response.length; i++) {\r\n            if (response[i][0].toLowerCase() == public_key) {\r\n                result.push({\r\n                    price: response[i][2],\r\n                    onSale: response[i][1],\r\n                    owner: response[i][0].toLowerCase(),\r\n                    contractAddress: response[i][5],\r\n                    tokenId: response[i][4],\r\n                    category: category\r\n                })\r\n            }\r\n        }\r\n        console.log(\"result:\", result);\r\n        return result;\r\n    } else {\r\n        console.log(\"web3 not defined\");\r\n    }\r\n}\r\n\r\nexport async function getSpecific(contractAddress, id) {\r\n    const web3 = new Web3(window.ethereum);\r\n    if (typeof web3 !== 'undefined') {\r\n        var abi = JSON.parse(nftTraderAbi);\r\n        var myContract2 = new web3.eth.Contract(abi, nftTraderContractAddress);\r\n        const response2 = await myContract2.methods.getInfo(contractAddress, id)\r\n            .call({\r\n                from: window.web3.currentProvider.selectedAddress,\r\n            });\r\n        var category_type = response2[3];\r\n        var category;\r\n        if (category_type == 0) category = \"land\";\r\n        if (category_type == 1) category = \"wearable\";\r\n        if (category_type == 2) category = \"decoration\";\r\n        console.log(\"getSpecific recieved result for getNFTs:\", response2);\r\n        const result = {\r\n            // name: response[0],\r\n            // category: response[1],\r\n            // description: response[2],\r\n            price: response2[2],\r\n            onSale: response2[1],\r\n            owner: response2[0].toLowerCase(),\r\n            contractAddress: response2[5],\r\n            tokenId: response2[4],\r\n            category: category,\r\n            ipfsHash: response2[6]\r\n        }\r\n        console.log(\"result:\", result);\r\n        return result;\r\n\r\n        console.log(\"getSpecific | fetching abi\");\r\n        var nftContractAbi = await fetch(\"https://ipfs.io/ipfs/QmZXbYk8QeGiT8Tzw8ESygbRVv4Xg1nynciTYzv3DJ1agD\")\r\n            .then((response) => response.json())\r\n            .then((responseJson) => {\r\n                return responseJson.output.abi;\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            })\r\n        console.log(\"nftContractAbi:\", nftContractAbi);\r\n        // var abi = JSON.parse(nftTraderAbi);\r\n        var myContract = new web3.eth.Contract(nftContractAbi, contractAddress);\r\n        const response = await myContract.methods.getMetaData()\r\n            .call({\r\n                from: window.web3.currentProvider.selectedAddress,\r\n            });\r\n        console.log(\"getSpecific recieved result for getMetaData:\", response);\r\n\r\n        for (let i = 0; i < response2.length; i++) {\r\n            console.log(response2[i][5].toLowerCase(), contractAddress.toLowerCase(), response2[i][4], id);\r\n            if (response2[i][5].toLowerCase() == contractAddress.toLowerCase() && response2[i][4] == id) {\r\n                const result = {\r\n                    name: response[0],\r\n                    category: response[1],\r\n                    description: response[2],\r\n                    price: response2[i][2],\r\n                    onSale: response2[i][1],\r\n                    owner: response2[i][0].toLowerCase(),\r\n                    contractAddress: response2[i][5],\r\n                    tokenId: response2[i][4],\r\n                    category: category\r\n                }\r\n                console.log(\"result:\", result);\r\n                return result;\r\n            }\r\n        }\r\n        console.log(\"Not Found specific!!!\");\r\n        return;\r\n\r\n    } else {\r\n        console.log(\"web3 not defined\");\r\n    }\r\n}\r\n\r\nexport async function createProduct(product) {\r\n    return (await fetch(`${baseUrl}/products/create`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(product)\r\n    })).json();\r\n}\r\n\r\nexport async function editProduct(id, product) {\r\n    return (await fetch(`${baseUrl}/products/edit/${id}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(product)\r\n    })).json();\r\n}\r\n\r\n\r\nexport async function activateSell(id) {\r\n    return (await fetch(`/products/enable/${id}`)).json()\r\n}\r\n\r\nexport async function archiveSell(id) {\r\n    return (await fetch(`/products/archive/${id}`)).json()\r\n}\r\n\r\nexport async function wishProduct(id) {\r\n    return (await fetch(`${baseUrl}/products/wish/${id}`, { credentials: 'include' })).json();\r\n}"]},"metadata":{},"sourceType":"module"}