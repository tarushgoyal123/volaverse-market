{"ast":null,"code":"const baseUrl = 'http://localhost:5000';\nexport async function connect() {\n  if (!window.ethereum) {\n    alert(\"Get MetaMask!\");\n    return;\n  }\n\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n}\nexport function getAddress() {\n  var account = '';\n\n  if (typeof window.ethereum !== 'undefined' && window.ethereum.isMetaMask) {\n    account = window.ethereum.selectedAddress;\n\n    if (typeof account === 'undefined' || account == null) {\n      account = '';\n    }\n  } // var buffer = _malloc(lengthBytesUTF8(account) + 1);\n  // stringToUTF8(account, buffer, account.length + 1);\n  // return buffer;\n\n\n  return account;\n}\nexport async function checkIfWalletIsConnected(onConnected) {\n  if (window.ethereum) {\n    const accounts = await window.ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    if (accounts.length > 0) {\n      const account = accounts[0];\n      onConnected(account);\n      return;\n    }\n  }\n}\nexport async function registerUser(userData) {\n  return (await fetch(`${baseUrl}/auth/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify(userData)\n  })).json();\n}\nexport async function loginUser(userData) {\n  return (await fetch(`${baseUrl}/auth/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify(userData)\n  })).json();\n}\nexport async function getUser() {\n  return await (await fetch(baseUrl + '/auth/getUser', {\n    credentials: 'include'\n  })).json();\n}\nexport async function getUserActiveSells(id) {\n  return (await fetch(`${baseUrl}/products/sells/active/${id}`, {\n    credentials: 'include'\n  })).json();\n}\nexport async function getUserArchivedSells() {\n  return (await fetch(`${baseUrl}/products/sells/archived`, {\n    credentials: 'include'\n  })).json();\n}\nexport async function getUserWishlist() {\n  return (await fetch(`${baseUrl}/products/wishlist/getWishlist`, {\n    credentials: 'include'\n  })).json();\n}\nexport async function editUserProfile(id, data) {\n  return (await fetch(`/user/edit-profile/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify(data)\n  })).json();\n}\nexport async function getUserById(id) {\n  return await (await fetch(baseUrl + `/user/getUserById/${id}`, {\n    credentials: 'include'\n  })).json();\n}","map":{"version":3,"sources":["C:/Users/tarus/Documents/Marketplace-ReactJS-Project/client/src/services/userData.js"],"names":["baseUrl","connect","window","ethereum","alert","accounts","request","method","getAddress","account","isMetaMask","selectedAddress","checkIfWalletIsConnected","onConnected","length","registerUser","userData","fetch","headers","credentials","body","JSON","stringify","json","loginUser","getUser","getUserActiveSells","id","getUserArchivedSells","getUserWishlist","editUserProfile","data","getUserById"],"mappings":"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","sourcesContent":["const baseUrl = 'http://localhost:5000';\r\n\r\n\r\nexport async function connect() {\r\n    if (!window.ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n    }\r\n\r\n    const accounts = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n    });\r\n}\r\n\r\nexport function getAddress() {\r\n    var account = '';\r\n    if (typeof window.ethereum !== 'undefined' && window.ethereum.isMetaMask) {\r\n        account = window.ethereum.selectedAddress;\r\n        if (typeof account === 'undefined' || account == null) {\r\n            account = '';\r\n        }\r\n    }\r\n    // var buffer = _malloc(lengthBytesUTF8(account) + 1);\r\n    // stringToUTF8(account, buffer, account.length + 1);\r\n    // return buffer;\r\n    return account;\r\n}\r\n\r\n\r\nexport async function checkIfWalletIsConnected(onConnected) {\r\n    if (window.ethereum) {\r\n        const accounts = await window.ethereum.request({\r\n            method: \"eth_accounts\",\r\n        });\r\n\r\n        if (accounts.length > 0) {\r\n            const account = accounts[0];\r\n            onConnected(account);\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\nexport async function registerUser(userData) {\r\n    return (await fetch(`${baseUrl}/auth/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(userData)\r\n    })).json();\r\n}\r\n\r\nexport async function loginUser(userData) {\r\n    return (await fetch(`${baseUrl}/auth/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(userData)\r\n    })).json();\r\n}\r\n\r\nexport async function getUser() {\r\n    return await (await fetch(baseUrl + '/auth/getUser', { credentials: 'include' })).json()\r\n}\r\n\r\nexport async function getUserActiveSells(id) {\r\n    return (await fetch(`${baseUrl}/products/sells/active/${id}`, { credentials: 'include' })).json();\r\n}\r\n\r\nexport async function getUserArchivedSells() {\r\n    return (await fetch(`${baseUrl}/products/sells/archived`, { credentials: 'include' })).json();\r\n}\r\n\r\nexport async function getUserWishlist() {\r\n    return (await fetch(`${baseUrl}/products/wishlist/getWishlist`, { credentials: 'include' })).json();\r\n}\r\n\r\nexport async function editUserProfile(id, data) {\r\n    return (await fetch(`/user/edit-profile/${id}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)\r\n    })).json();\r\n}\r\n\r\nexport async function getUserById(id) {\r\n    return await (await fetch(baseUrl + `/user/getUserById/${id}`, { credentials: 'include' })).json()\r\n}"]},"metadata":{},"sourceType":"module"}