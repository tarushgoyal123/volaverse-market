{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tarus\\\\Documents\\\\Marketplace-ReactJS-Project\\\\client\\\\src\\\\hooks\\\\metamask.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { injected } from '../components/wallet/connectors';\nimport { useWeb3React } from '@web3-react/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MetaMaskContext = /*#__PURE__*/React.createContext(null);\nexport const MetaMaskProvider = ({\n  children\n}) => {\n  _s();\n\n  const {\n    activate,\n    account,\n    library,\n    connector,\n    active,\n    deactivate\n  } = useWeb3React();\n  const [isActive, setIsActive] = useState(false);\n  const [shouldDisable, setShouldDisable] = useState(false); // Should disable connect button while connecting to MetaMask\n\n  const [isLoading, setIsLoading] = useState(true); // Init Loading\n\n  useEffect(() => {\n    connect().then(val => {\n      setIsLoading(false);\n    });\n  }, []); // Check when App is Connected or Disconnected to MetaMask\n\n  const handleIsActive = useCallback(() => {\n    console.log('App is connected with MetaMask ', active);\n    setIsActive(active);\n  }, [active]);\n  useEffect(() => {\n    handleIsActive();\n  }, [handleIsActive]); // Connect to MetaMask wallet\n\n  const connect = async () => {\n    console.log('Connecting to MetaMask...');\n    setShouldDisable(true);\n\n    try {\n      await activate(injected).then(() => {\n        setShouldDisable(false);\n      });\n    } catch (error) {\n      console.log('Error on connecting: ', error);\n    }\n  }; // Disconnect from Metamask wallet\n\n\n  const disconnect = async () => {\n    console.log('Disconnecting wallet from App...');\n\n    try {\n      await deactivate();\n    } catch (error) {\n      console.log('Error on disconnnect: ', error);\n    }\n  };\n\n  const values = useMemo(() => ({\n    isActive,\n    account,\n    isLoading,\n    connect,\n    disconnect,\n    shouldDisable\n  }), [isActive, isLoading, shouldDisable, account]);\n  return /*#__PURE__*/_jsxDEV(MetaMaskContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 12\n  }, this);\n};\n\n_s(MetaMaskProvider, \"DDH4a8liUS8EbUTjAv3q1tkL0EY=\", false, function () {\n  return [useWeb3React];\n});\n\n_c = MetaMaskProvider;\nexport default function useMetaMask() {\n  _s2();\n\n  const context = React.useContext(MetaMaskContext);\n\n  if (context === undefined) {\n    throw new Error('useMetaMask hook must be used with a MetaMaskProvider component');\n  }\n\n  return context;\n}\n\n_s2(useMetaMask, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"MetaMaskProvider\");","map":{"version":3,"sources":["C:/Users/tarus/Documents/Marketplace-ReactJS-Project/client/src/hooks/metamask.js"],"names":["React","useState","useEffect","useMemo","useCallback","injected","useWeb3React","MetaMaskContext","createContext","MetaMaskProvider","children","activate","account","library","connector","active","deactivate","isActive","setIsActive","shouldDisable","setShouldDisable","isLoading","setIsLoading","connect","then","val","handleIsActive","console","log","error","disconnect","values","useMetaMask","context","useContext","undefined","Error"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,WAA9C,QAAiE,OAAjE;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,YAAT,QAA6B,kBAA7B;;AAEA,OAAO,MAAMC,eAAe,gBAAGP,KAAK,CAACQ,aAAN,CAAoB,IAApB,CAAxB;AAEP,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAE9C,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,OAAZ;AAAqBC,IAAAA,OAArB;AAA8BC,IAAAA,SAA9B;AAAyCC,IAAAA,MAAzC;AAAiDC,IAAAA;AAAjD,MAAgEV,YAAY,EAAlF;AAEA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACkB,aAAD,EAAgBC,gBAAhB,IAAoCnB,QAAQ,CAAC,KAAD,CAAlD,CAL8C,CAKY;;AAC1D,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,IAAD,CAA1C,CAN8C,CAQ9C;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZqB,IAAAA,OAAO,GAAGC,IAAV,CAAeC,GAAG,IAAI;AAClBH,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT,CAT8C,CAe9C;;AACA,QAAMI,cAAc,GAAGtB,WAAW,CAAC,MAAM;AACrCuB,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+Cb,MAA/C;AACAG,IAAAA,WAAW,CAACH,MAAD,CAAX;AACH,GAHiC,EAG/B,CAACA,MAAD,CAH+B,CAAlC;AAKAb,EAAAA,SAAS,CAAC,MAAM;AACZwB,IAAAA,cAAc;AACjB,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT,CArB8C,CAyB9C;;AACA,QAAMH,OAAO,GAAG,YAAY;AACxBI,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACAR,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;;AACA,QAAI;AACA,YAAMT,QAAQ,CAACN,QAAD,CAAR,CAAmBmB,IAAnB,CAAwB,MAAM;AAChCJ,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,OAFK,CAAN;AAGH,KAJD,CAIE,OAAMS,KAAN,EAAa;AACXF,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCC,KAArC;AACH;AACJ,GAVD,CA1B8C,CAsC9C;;;AACA,QAAMC,UAAU,GAAG,YAAY;AAC3BH,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;;AACA,QAAI;AACA,YAAMZ,UAAU,EAAhB;AACH,KAFD,CAEE,OAAMa,KAAN,EAAa;AACXF,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCC,KAAtC;AACH;AACJ,GAPD;;AASA,QAAME,MAAM,GAAG5B,OAAO,CAClB,OAAO;AACHc,IAAAA,QADG;AAEHL,IAAAA,OAFG;AAGHS,IAAAA,SAHG;AAIHE,IAAAA,OAJG;AAKHO,IAAAA,UALG;AAMHX,IAAAA;AANG,GAAP,CADkB,EASlB,CAACF,QAAD,EAAWI,SAAX,EAAsBF,aAAtB,EAAqCP,OAArC,CATkB,CAAtB;AAYA,sBAAO,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEmB,MAAjC;AAAA,cAA0CrB;AAA1C;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CA7DM;;GAAMD,gB;UAE6DH,Y;;;KAF7DG,gB;AA+Db,eAAe,SAASuB,WAAT,GAAuB;AAAA;;AAClC,QAAMC,OAAO,GAAGjC,KAAK,CAACkC,UAAN,CAAiB3B,eAAjB,CAAhB;;AAEA,MAAI0B,OAAO,KAAKE,SAAhB,EAA2B;AACvB,UAAM,IAAIC,KAAJ,CAAU,iEAAV,CAAN;AACH;;AAED,SAAOH,OAAP;AACH;;IARuBD,W","sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react'\r\nimport { injected } from '../components/wallet/connectors'\r\nimport { useWeb3React } from '@web3-react/core';\r\n\r\nexport const MetaMaskContext = React.createContext(null)\r\n\r\nexport const MetaMaskProvider = ({ children }) => {\r\n\r\n    const { activate, account, library, connector, active, deactivate } = useWeb3React()\r\n    \r\n    const [isActive, setIsActive] = useState(false)\r\n    const [shouldDisable, setShouldDisable] = useState(false) // Should disable connect button while connecting to MetaMask\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    // Init Loading\r\n    useEffect(() => {\r\n        connect().then(val => {\r\n            setIsLoading(false)\r\n        })\r\n    }, [])\r\n\r\n    // Check when App is Connected or Disconnected to MetaMask\r\n    const handleIsActive = useCallback(() => {\r\n        console.log('App is connected with MetaMask ', active)\r\n        setIsActive(active)\r\n    }, [active])\r\n\r\n    useEffect(() => {\r\n        handleIsActive()\r\n    }, [handleIsActive])\r\n\r\n    // Connect to MetaMask wallet\r\n    const connect = async () => {\r\n        console.log('Connecting to MetaMask...')\r\n        setShouldDisable(true)\r\n        try {\r\n            await activate(injected).then(() => {\r\n                setShouldDisable(false)\r\n            })\r\n        } catch(error) {\r\n            console.log('Error on connecting: ', error)\r\n        }\r\n    }\r\n\r\n    // Disconnect from Metamask wallet\r\n    const disconnect = async () => {\r\n        console.log('Disconnecting wallet from App...')\r\n        try {\r\n            await deactivate()\r\n        } catch(error) {\r\n            console.log('Error on disconnnect: ', error)\r\n        }\r\n    }\r\n\r\n    const values = useMemo(\r\n        () => ({\r\n            isActive,\r\n            account,\r\n            isLoading,\r\n            connect,\r\n            disconnect,\r\n            shouldDisable\r\n        }),\r\n        [isActive, isLoading, shouldDisable, account]\r\n    )\r\n\r\n    return <MetaMaskContext.Provider value={values}>{children}</MetaMaskContext.Provider>\r\n}\r\n\r\nexport default function useMetaMask() {\r\n    const context = React.useContext(MetaMaskContext)\r\n\r\n    if (context === undefined) {\r\n        throw new Error('useMetaMask hook must be used with a MetaMaskProvider component')\r\n    }\r\n\r\n    return context\r\n}"]},"metadata":{},"sourceType":"module"}