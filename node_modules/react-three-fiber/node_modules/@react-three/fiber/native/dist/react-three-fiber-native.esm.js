import * as THREE from 'three';
import { Asset } from 'expo-asset';
import { c as createEvents, e as extend, u as useMemoizedFn, p as pick, o as omit, a as createRoot, b as unmountComponentAtNode } from '../../dist/index-56b68682.esm.js';
export { t as ReactThreeFiber, v as _roots, s as act, m as addAfterEffect, l as addEffect, n as addTail, k as advance, h as applyProps, d as context, f as createPortal, a as createRoot, i as dispose, e as extend, q as getRootState, j as invalidate, g as reconciler, r as render, b as unmountComponentAtNode, y as useFrame, z as useGraph, A as useLoader, u as useMemoizedFn, w as useStore, x as useThree } from '../../dist/index-56b68682.esm.js';
import _extends from '@babel/runtime/helpers/esm/extends';
import * as React from 'react';
import mergeRefs from 'react-merge-refs';
import { PixelRatio, View, StyleSheet } from 'react-native';
import { GLView } from 'expo-gl';
import Pressability from 'react-native/Libraries/Pressability/Pressability';
import 'react-reconciler/constants';
import 'zustand';
import 'react-reconciler';
import 'scheduler';
import 'suspend-react';

const EVENTS = {
  PRESS: 'onPress',
  PRESSIN: 'onPressIn',
  PRESSOUT: 'onPressOut',
  LONGPRESS: 'onLongPress',
  HOVERIN: 'onHoverIn',
  HOVEROUT: 'onHoverOut',
  PRESSMOVE: 'onPressMove'
};
const DOM_EVENTS = {
  [EVENTS.PRESS]: 'onClick',
  [EVENTS.PRESSIN]: 'onPointerDown',
  [EVENTS.PRESSOUT]: 'onPointerUp',
  [EVENTS.LONGPRESS]: 'onDoubleClick',
  [EVENTS.HOVERIN]: 'onPointerOver',
  [EVENTS.HOVEROUT]: 'onPointerOut',
  [EVENTS.PRESSMOVE]: 'onPointerMove'
};
function createTouchEvents(store) {
  const {
    handlePointer
  } = createEvents(store);

  const handleTouch = (event, name) => {
    event.persist() // Apply offset
    ;
    event.nativeEvent.offsetX = event.nativeEvent.locationX;
    event.nativeEvent.offsetY = event.nativeEvent.locationY; // Emulate DOM event

    const callback = handlePointer(DOM_EVENTS[name]);
    return callback(event.nativeEvent);
  };

  return {
    priority: 1,
    enabled: true,

    compute(event, state, previous) {
      // https://github.com/pmndrs/react-three-fiber/pull/782
      // Events trigger outside of canvas when moved, use offsetX/Y by default and allow overrides
      state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);
      state.raycaster.setFromCamera(state.pointer, state.camera);
    },

    connected: undefined,
    handlers: Object.values(EVENTS).reduce((acc, name) => ({ ...acc,
      [name]: event => handleTouch(event, name)
    }), {}),
    connect: () => {
      const {
        set,
        events
      } = store.getState();
      events.disconnect == null ? void 0 : events.disconnect();
      const connected = new Pressability(events == null ? void 0 : events.handlers);
      set(state => ({
        events: { ...state.events,
          connected
        }
      }));
      const handlers = connected.getEventHandlers();
      return handlers;
    },
    disconnect: () => {
      const {
        set,
        events
      } = store.getState();

      if (events.connected) {
        events.connected.reset();
        set(state => ({
          events: { ...state.events,
            connected: undefined
          }
        }));
      }
    }
  };
}

const CANVAS_PROPS = ['gl', 'events', 'shadows', 'linear', 'flat', 'orthographic', 'frameloop', 'performance', 'raycaster', 'camera', 'onPointerMissed', 'onCreated'];

function Block({
  set
}) {
  React.useLayoutEffect(() => {
    set(new Promise(() => null));
    return () => set(false);
  }, [set]);
  return null;
}

class ErrorBoundary extends React.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      error: false
    };
  }

  componentDidCatch(error) {
    this.props.set(error);
  }

  render() {
    return this.state.error ? null : this.props.children;
  }

}

ErrorBoundary.getDerivedStateFromError = () => ({
  error: true
});

const Canvas = /*#__PURE__*/React.forwardRef(({
  children,
  fallback,
  style,
  events,
  ...props
}, forwardedRef) => {
  // Create a known catalogue of Threejs-native elements
  // This will include the entire THREE namespace by default, users can extend
  // their own elements by using the createRoot API instead
  React.useMemo(() => extend(THREE), []);
  const onPointerMissed = useMemoizedFn(props.onPointerMissed);
  const [{
    width,
    height
  }, setSize] = React.useState({
    width: 0,
    height: 0
  });
  const [canvas, setCanvas] = React.useState(null);
  const [bind, setBind] = React.useState();
  const canvasProps = pick({ ...props,
    onPointerMissed
  }, CANVAS_PROPS);
  const viewProps = omit({ ...props,
    onPointerMissed
  }, CANVAS_PROPS);
  const [block, setBlock] = React.useState(false);
  const [error, setError] = React.useState(false); // Suspend this component if block is a promise (2nd run)

  if (block) throw block; // Throw exception outwards if anything within canvas throws

  if (error) throw error;
  const viewRef = React.useRef(null);
  const root = React.useRef(null);
  const onLayout = React.useCallback(e => {
    const {
      width,
      height
    } = e.nativeEvent.layout;
    setSize({
      width,
      height
    });
  }, []);
  const onContextCreate = React.useCallback(context => {
    const canvasShim = {
      width: context.drawingBufferWidth,
      height: context.drawingBufferHeight,
      style: {},
      addEventListener: () => {},
      removeEventListener: () => {},
      clientHeight: context.drawingBufferHeight,
      getContext: () => context
    };
    setCanvas(canvasShim);
  }, []);

  if (width > 0 && height > 0 && canvas) {
    if (!root.current) root.current = createRoot(canvas); // Overwrite onCreated to apply RN bindings

    const onCreated = state => {
      // Bind events after creation
      const handlers = state.events.connect == null ? void 0 : state.events.connect(viewRef.current);
      setBind(handlers); // Bind render to RN bridge

      const context = state.gl.getContext();
      const renderFrame = state.gl.render.bind(state.gl);

      state.gl.render = (scene, camera) => {
        renderFrame(scene, camera);
        context.endFrameEXP();
      };

      return canvasProps == null ? void 0 : canvasProps.onCreated == null ? void 0 : canvasProps.onCreated(state);
    };

    root.current.configure({ ...canvasProps,
      // expo-gl can only render at native dpr/resolution
      // https://github.com/expo/expo-three/issues/39
      dpr: PixelRatio.get(),
      size: {
        width,
        height
      },
      events: events || createTouchEvents,
      onCreated
    });
    root.current.render( /*#__PURE__*/React.createElement(ErrorBoundary, {
      set: setError
    }, /*#__PURE__*/React.createElement(React.Suspense, {
      fallback: /*#__PURE__*/React.createElement(Block, {
        set: setBlock
      })
    }, children)));
  }

  React.useEffect(() => {
    return () => unmountComponentAtNode(canvas);
  }, [canvas]);
  return /*#__PURE__*/React.createElement(View, _extends({}, viewProps, {
    ref: mergeRefs([viewRef, forwardedRef]),
    onLayout: onLayout,
    style: {
      flex: 1,
      ...style
    }
  }, bind), width > 0 && /*#__PURE__*/React.createElement(GLView, {
    onContextCreate: onContextCreate,
    style: StyleSheet.absoluteFill
  }));
});

/**
 * Generates an asset based on input type.
 */

const getAsset = input => {
  if (input instanceof Asset) return input;

  switch (typeof input) {
    case 'string':
      return Asset.fromURI(input);

    case 'number':
      return Asset.fromModule(input);

    default:
      throw 'Invalid asset! Must be a URI or module.';
  }
}; // Don't pre-process urls, let expo-asset generate an absolute URL


const extractUrlBase = THREE.LoaderUtils.extractUrlBase.bind(THREE.LoaderUtils);

THREE.LoaderUtils.extractUrlBase = url => typeof url === 'string' ? extractUrlBase(url) : './'; // There's no Image in native, so create a data texture instead


THREE.TextureLoader.prototype.load = function load(url, onLoad, onProgress, onError) {
  const texture = new THREE.Texture(); // @ts-ignore

  texture.isDataTexture = true;
  getAsset(url).downloadAsync().then(asset => {
    texture.image = {
      data: asset,
      width: asset.width,
      height: asset.height
    };
    texture.needsUpdate = true;
    onLoad == null ? void 0 : onLoad(texture);
  }).catch(onError);
  return texture;
}; // Fetches assets via XMLHttpRequest


THREE.FileLoader.prototype.load = function (url, onLoad, onProgress, onError) {
  if (this.path) url = this.path + url;
  const request = new XMLHttpRequest();
  getAsset(url).downloadAsync().then(asset => {
    request.open('GET', asset.uri, true);
    request.addEventListener('load', event => {
      if (request.status === 200) {
        onLoad == null ? void 0 : onLoad(request.response);
        this.manager.itemEnd(url);
      } else {
        onError == null ? void 0 : onError(event);
        this.manager.itemError(url);
        this.manager.itemEnd(url);
      }
    }, false);
    request.addEventListener('progress', event => {
      onProgress == null ? void 0 : onProgress(event);
    }, false);
    request.addEventListener('error', event => {
      onError == null ? void 0 : onError(event);
      this.manager.itemError(url);
      this.manager.itemEnd(url);
    }, false);
    request.addEventListener('abort', event => {
      onError == null ? void 0 : onError(event);
      this.manager.itemError(url);
      this.manager.itemEnd(url);
    }, false);
    if (this.responseType) request.responseType = this.responseType;
    if (this.withCredentials) request.withCredentials = this.withCredentials;

    for (const header in this.requestHeader) {
      request.setRequestHeader(header, this.requestHeader[header]);
    }

    request.send(null);
    this.manager.itemStart(url);
  });
  return request;
};

export { Canvas, createTouchEvents as events };
